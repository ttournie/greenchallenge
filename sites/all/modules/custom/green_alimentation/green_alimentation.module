<?php
/**
 * @file
 * Code for the Green Alimentation feature.
 */

include_once 'green_alimentation.features.inc';

/**
 * @file
 */

/**
 * Implements hook_permission().
 */
function green_alimentation_permission() {
  return array(
    'create alimentation profile' => array(
      'title' => t('Create alimentation profile'),
      'description' => t('Allow users to add/modify alimentation profile.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function green_alimentation_menu() {
  $items['profil/alimentation/edit'] = array(
    'type' => MENU_NORMAL_ITEM,
    'title' => 'Mon Alimentation',
    'page callback' => 'green_global_page',
    'page arguments' => array('alimentation'),
    'access arguments' => array('create alimentation profile'),
    'file path' => drupal_get_path('module', 'green_global'),
    'file' => 'green_global.module',
  );

  $items['profil/%user_name/alimentation'] = array(
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
    'title' => 'Alimentation',
    'page callback' => 'green_global_page_view',
    'page arguments' => array(1, 2, 'Alimentation'),
    'file path' => drupal_get_path('module', 'green_global'),
    'file' => 'green_global.module',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_green_user_score().
 */
function green_alimentation_green_user_score($user_name) {
  // Replacement of underscors.
  $user_name = str_replace('_', ' ', $user_name);
  $user = user_load_by_name($user_name);

  if (!$user) {
    return FALSE;
  }

  $node_type = 'alimentation';
  // Search for an existing alimentation for the current user.
  $query = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', $node_type)
    ->propertyCondition('status', TRUE)
    ->propertyCondition('uid', $user->uid)
    ->execute();

  // If the user has no alimentation node yet.
  if (empty($results['node'])) {
    return FALSE;
  }

  else {
    // Load the user's alimentation node.
    $node = node_load(reset($results['node'])->nid);
  }

  $score = 0;
  // Diet type field.
  if (isset($node->field_type_de_regime['und'])) {
    switch ($node->field_type_de_regime['und'][0]['value']) {
      case 'Végétarien':
        $score += 30;
        break;

      case 'Végétalien':
        $score += 50;
        break;
    }
  }
  // Fish consumption.
  if (isset($node->field_conso_poissons['und'])) {
    switch ($node->field_conso_poissons['und'][0]['value']) {
      case '0':
        $score += 20;
        break;

      case '1':
        $score += 14;
        break;

      case '2':
        $score += 10;
        break;

      case '3':
        $score += 6;
        break;

      case '4':
        $score += 2;
        break;
    }
  }
  return $score;
}

/**
 * Implements hook_user_view_alter().
 */
function green_alimentation_node_view_alter(&$build) {
  // Testing the node type.
  if ($build['#bundle'] == 'alimentation') {
    $path = current_path();
    $path = drupal_get_path_alias($path);
    $array_path = explode('/', $path);
    $username = $array_path[1];

    // Calculate and display the score.
    $score = green_alimentation_green_user_score($username);
    $build['text'] = array(
      '#markup' => '<p class="score"> Score : ' . $score . '</p>',
      '#weight' => -10,
    );

    // Calculate and display the score.
    $user = user_name_load($username);
    $percentage = green_global_completed($user, $build['#bundle']);
    drupal_add_js(drupal_get_path('module', 'green_global') . '/js/round-percentage.js');
    $build['percentage'] = array(
      '#markup' => '<div class="round" data-min="' . $percentage . '"><span class="text">' . $percentage . '</span>
      </div>',
      '#weight' => -10,
    );
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function green_alimentation_form_alimentation_node_form_alter(&$form, &$form_state) {
  $form['actions']['submit']['#submit'][] = 'green_alimentation_form_alimentation_node_submit';
  $form['#validate'][] = 'green_alimentation_form_alimentation_node_validate';
}

/**
 * Change form redirection.
 */
function green_alimentation_form_alimentation_node_submit($form, &$form_state) {
  global $user;
  // Convertion user name string to url with pathauto.
  if (module_exists('pathauto')) {
    module_load_include('inc', 'pathauto', 'pathauto');
    $user_name = pathauto_cleanstring($user->name);
    $form_state['redirect'] = '/profil/' . $user_name . '/alimentation';
  }
}


/**
 * Insert badges in the database when it's necessary.
 */
function green_alimentation_form_alimentation_node_validate($form, &$form_state) {
  global $user;
  // Test the field value.
  if ($form_state['values']['field_type_de_regime']['und'][0]['value'] == 'Végétarien') {
    $badge_name = 'Végétarien';
    // If the user do not have the badge we give him.
    if (!green_badge_user_has_badge($user, $badge_name)) {
      db_insert('users_badge')
      ->fields(array(
        'badge_id' => 1,
        'user_id' => $user->uid,
      ))
      ->execute();
    }
  }
  else {
    // We delete the badge if the user change the fied value.
    $sql = "DELETE FROM {users_badge} ub WHERE EXISTS (SELECT b.id FROM {badge} b WHERE ub.badge_id=b.id AND b.name= 'Végétarien') AND ub.user_id=" . $user->uid;
    db_query($sql)->execute();
  }
}
