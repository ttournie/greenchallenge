<?php

/**
 * @file
 * Allows users with valid permissions to tag CCK fields
 * as required fields for the content to be considered complete.
 */

/**
 * Implements hook_permission().
 */
function content_complete_permission() {
  return array(
    'administer content complete' => array(
      'title' => t('Administer Content Complete'),
    ), 
    'access content complete' => array(
      'title' => t('Access Content Complete'),
      'description' => t('View default Content Complete blocks')
    ),
  );
}

/**
 * Implements hook_help().
 */
function content_complete_help($path, $arg) {
  switch ($path) {
    case 'admin/config/content_complete':
      return '<p>' . t('You can find more configuration options on the content type edit form of Content-Complete-enabled <a href="@content-types">content types</a>.', array('@content-types' => url('admin/content/types'))) . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function content_complete_menu() {
  $items['admin/config/content_complete'] = array(
    'title' => 'Content Complete',
    'description' => 'Tag CCK fields as required for percent complete handling.',
    'page callback' => 'content_complete_admin_settings',
    'access arguments' => array('administer content complete'),
    'file' => 'content_complete.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function content_complete_block_info() {
  // Block for completeness of the current node.
  $blocks['content_complete_node'] = array(
    'info' => t('Content Complete: current node'),
    'cache' => DRUPAL_NO_CACHE,
  );
  
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function content_complete_block_view($delta = '') {
  $block = array();
  
  if (user_access('access content complete')) {
    switch ($delta) {
      case 'content_complete_node': 
        if (arg(0) == 'node' && is_numeric(arg(1))) {
          
          $node_menu = menu_get_object();
          // Load a fresh copy of the node that does not have all fields completed yet (e.g. body, book, ..)
          $node = node_load($node_menu->nid);

          if (variable_get('content_complete_' . $node->type, 0)) {
            $complete = content_complete_get_data($node, TRUE);
            if (!empty($complete) && 
              ($complete['percent'] != 100 || ($complete['percent'] == 100 && !variable_get('content_complete_hide_complete', TRUE)))) {
              $block['subject'] = t('Content Complete: current node');
              $block['content'] = theme('content_complete_profile_percent_complete', $complete);
            }
          }          
        }
      break;
    }
  }
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function content_complete_block_configure($delta = '') {
  $form = array();
  if ($delta == 'content_complete_node') {  
    $form['content_complete_hide_block'] = array(
      '#title' => t('Hide the blocks when the percentage reaches 100%'),
      '#type' => 'checkbox',
      '#default_value' => variable_get('content_complete_hide_complete', TRUE),
      '#description' => t('If you disable this feature, the Content Complete block will be shown even when 100% has been reached.'),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function content_complete_block_save($delta = '', $edit = array()) {
  if ($delta == 'content_complete_node') {  
    variable_set('content_complete_hide_complete', $edit['content_complete_hide_block']);
  }
  return;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * 
 * If a content type is deleted, delete also all its entries in the database; hook onto submit function.
 */
function content_complete_form_node_type_delete_confirm_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'content_complete_node_type_delete_confirm_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 * 
 * If a field from a content type is deleted, delete the entry in the database; hook onto submit function.
 */
function content_complete_form_content_field_remove_form_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'content_complete_content_field_remove_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 * 
 * Content type settings form.
 */
function content_complete_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  if (user_access('access content complete')) {
    $form['content_complete'] = array(
      '#type' => 'fieldset',
      '#title' => t('Content complete'),
      '#group' => 'additional_settings',
    );
    
    $form['content_complete']['content_complete'] = array(
      '#type' => 'radios',
      '#title' => t('Completeness'),
      '#default_value' => variable_get('content_complete_' . $form['#node_type']->type, 0),
      '#options' => array(t('Disabled'), t('Enabled')),
      '#description' => t('Enable the completeness feature for that content type.'),
    );
    
    // Do we add a new content type, or do we modify an existing one?
    $type_exists = ($form['#node_type']->type) ? TRUE : FALSE;

    if ($type_exists) {
      $fields = content_complete_get_fields($form['#node_type']->type);
      
      $options = array();
      foreach ($fields as $field_name => $field_data) {
        $key = $field_name;
        $label = $field_data['label'] . " <span class='description'>" . $field_name . "</span>";
        $options[$field_name] = $label;
      }

      $form['content_complete']['content_complete_fields'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Fields'),
        '#default_value' => variable_get('content_complete_fields_' . $form['#node_type']->type, array()),
        '#options' => $options,
        '#description' => t('Select one or more fields for completeness.'),
      );
      
      // Warn the user that cache needs to be rebuilt after changing those values
      $form['content_complete']['warning_cache'] = array(
        '#prefix' => "<div class='warning'>",
        '#title' => t('Note that you need to <a href="@cache">rebuild your cache</a> after changing those values.', array('@cache' => url('admin/config/content_complete'))),        
        '#suffix' => "</div>",
        '#type' => 'item',
      );    
    } 
    else {
      // Warn the user that no fields are available at the time of content type creation.
      $form['content_complete']['warning_new_type'] = array(
        '#prefix' => "<div class='warning'>",
        '#value' => t('You can only add fields to check for completeness after creating the content type and adding fields to it.'),
        '#suffix' => "</div>",
      ); 
    }
  }
}

/**
 * Implements hook_form_alter().
 * 
 * @see content_complete_node_type_delete_confirm_submit()
 * @see content_complete_content_field_remove_form_submit()
 */
function content_complete_form_alter(&$form, &$form_state, $form_id) {
  // Intercept all node edit forms and highlight field to be completed
  if (empty($form_state['post']) && arg(2) == 'edit' && strpos($form_id, 'node_form') !== FALSE && !empty($_GET['content_complete_fieldname'])) {
    $fieldname = $_GET['content_complete_fieldname'];
    drupal_set_message(t('Please complete the fields.'), 'warning');
    // TODO find a way to use the 'error' class for this field
    //form_set_error($fieldname, t('Please complete the fields.'));
    //$form[$fieldname]['#attributes']['class'][] = 'error';
  }
}

/**
 * Submit function called when a node type is deleted. Remove the node type from
 * the content_complete table as well.
 * 
 * @see content_complete_form_alter()
 */
function content_complete_node_type_delete_confirm_submit($form, &$form_state) {
  if (isset($form['type']['#value'])) {
    $type = $form['type']['#value'];
    
    if (content_complete_enabled_type($type)) {
      variable_del('content_complete_' . $type);
      variable_del('content_complete_fields_' . $type);
      db_query("DELETE FROM {content_complete} c INNER JOIN {node} n ON c.nid = n.nid WHERE n.type = :type", array(':type' => $type));
    }
  }
}

/**
 * Submit function called when a CCK field is deleted. Remove the field from
 * the content_complete table as well.
 * 
 * @see content_complete_form_alter()
 */
function content_complete_content_field_remove_form_submit($form, &$form_state) {
  if (isset($form['type_name']['#value']) && isset($form['field_name']['#value'])) {
    $type = $form['type_name']['#value'];
    
    if (content_complete_enabled_type($type)) {
      $field_name = $form['field_name']['#value'];
      $fields = variable_get('content_complete_fields_' . $type, array());
      
      $nr_fields = count($fields);      
      for ($i = 0; $i < $nr_fields; $i++) {
        if ($fields[$i] == $field_name) unset($fields[$i]);
      }
      
      // a content complete enabled field has been deleted: remove from database and clean cache
      if (count($fields) < $nr_fields) {
        variable_set('content_complete_fields_' . $type, $fields);
        content_complete_clear_cache();
        drupal_set_message(t('A field enabled for content completion has been deleted. You need to <a href="@cache">rebuild your cache</a> to reflect the correct completion percentage.', array('@cache' => url('admin/config/content_complete'))), 'warning');
      }
    }
  }
}

/**
 * Get the content complete percentage data for a given node or a whole content type.
 * All data is cached and recalculated only on demand.
 * 
 * TODO: refactor part of this code into the preprocess function, see theme.inc
 *
 * @see theme_content_complete_profile_percent_complete()
 * @param $node
 *   The node object to calculate completion for.
 * @param $recalculate
 *   Recalculates the cached data.
 * @return 
 *   An array of fields such as percentage complete, next field to be
 *   completed etc.
 */
function content_complete_get_data($node, $recalculate = FALSE) {
  $data_raw = db_query("SELECT data from {content_complete} WHERE nid = :nid", array(':nid' => $node->nid))->fetchField();
  // $data_raw = db_result(db_query("SELECT data from {content_complete} WHERE nid = %d", $node->nid));
  
  // If there is data and we are not being asked to recalculate, then just used the cached values
  if ($data_raw && !$recalculate) {
    $data = unserialize($data_raw);
  }
  // Else recalcualte the completeness data
  else {
    $fields = content_complete_get_fields($node->type); // Grab all fields for that content type
    $tagged_fields = content_complete_get_tagged_fields($node->type); // Fields tagged for completeness (can be empty)
    $fields_values = content_complete_get_fields_values($node); // Completed fields (can be empty)
    
    $percent = 0;
    $complete = 0;
    $incomplete = 0;
    $total = 0;
    $nextfield_set = FALSE;
    $nextfield = '';
    
    // Compare the two arrays and compute percentages etc.
    foreach ($tagged_fields as $tagged_field) {
      if ($fields_values[$tagged_field] == '') { // Empty field
        if ($nextfield_set === FALSE) {
          $nextfield_set = TRUE;
          $nextfield = $fields[$tagged_field]['label'];
          $nextname = $tagged_field;
        }
      }
      else {
        $complete++;
      }
    }
    
    $dec = 0;
    if (count($tagged_fields)) {
      $dec = number_format(($complete / count($tagged_fields)), 2);
    }
    $percent = $dec * 100;
    if ($nextfield_set) {
      $next = number_format((($complete + 1) / count($tagged_fields)), 2);
      $nextpercent = $next * 100;
    }
    
    $incomplete = count($tagged_fields) - $complete;
    $total = count($tagged_fields);
    $nid = $fields_values['nid'];
    $type_names = node_type_get_names();
    
    $data = array();
    $data['nid'] = $nid;
    $data['percent'] = $percent;
    $data['completed'] = $complete;
    $data['incomplete'] = $incomplete;
    $data['total'] = $total;
    $data['nextfield'] = $nextfield;
    if (isset($nextpercent)) $data['nextpercent'] = $nextpercent;
    if (isset($nextname)) $data['nextname'] = $nextname;
    $data['type'] = $node->type;
    
    // Put human readble name.
    $data['name'] = content_complete_tt("nodetype:type:$node->type:name", $type_names[$node->type]);
    
    // Update the cache
    db_delete('content_complete')
      ->condition('nid', $node->nid)
      ->execute();
    db_insert('content_complete')
      ->fields(array(
        'nid' => $node->nid,
        'completeness' => $data['percent'],
        'data' => serialize($data),
      ))
      ->execute();
  }  
  
  // See who has edit permissions, depending on this we show/hide the edit links
  global $user;
  if (user_access('edit any ' . $node->type .' content') ||
     (user_access('edit own ' . $node->type .' content') && $node->uid == $user->uid)) {
    $data['edit'] = TRUE;
  }
  else {
    $data['edit'] = FALSE;
  }
  
  return $data;
}

/**
 * Implements hook_node_insert().
 * 
 * Recalculate the cache when a CC-enabled node gets inserted.
 */
function content_complete_node_insert($node) {
  if (variable_get('content_complete_' . $node->type, 0)) {
    content_complete_get_data($node, TRUE);
  }
}

/**
 * Implements hook_node_update().
 * 
 * Recalculate the cache when a CC-enabled node gets updated.
 */
function content_complete_node_update($node) {
  if (variable_get('content_complete_' . $node->type, 0)) {
    content_complete_get_data($node, TRUE);
  }
}

/**
 * Implements hook_node_delete().
 * 
 * Recalculate the cache when a CC-enabled node gets updated.
 */
function content_complete_node_delete($node) {
  if (variable_get('content_complete_' . $node->type, 0)) {
    db_delete('content_complete')
      ->condition('nid', $node->nid)
      ->execute();
  }
}

/**
 * Clear the cache.
 */
function content_complete_clear_cache() {
  db_delete('content_complete')
    ->execute();
}

/**
 * Get all content types that have been tagged.
 * 
 * @return
 *   Array of content types.
 */
function content_complete_get_enabled_types() {
  $types = node_type_get_names();
  $tagged_types = array();
  foreach ($types as $type => $name) {
    if (variable_get('content_complete_' . $type, 0)) {
     $tagged_types[$type] = $name;
    }
  }
  return $tagged_types;
}

/**
 * Determine if a given node type is a content complete node type.
 * 
 * @param $type
 *   The node object or the node's type
 */
function content_complete_enabled_type($type) {
  if (is_object($type)) {
    $type = $type->type;
  }
  return variable_get('content_complete_' . $type, 0);
}

/**
 * Get all the CCK fields that have been completed.
 *
 * @param $content_type
 *   The machine-readable name of the content type.
 * @return 
 *   Array of nodes with each node being an array of fields with their values.
 */
function content_complete_get_fields_values($node) {
  $fields = content_complete_get_fields($node->type); // Grab all fields for the node's content type
  $tagged_fields = content_complete_get_tagged_fields($node->type);
  
  // We then build an array of the node fields values
  $node_fields = array();
  foreach ($fields as $field_name => $field_data) {
    if ($field_name == 'title') {
      $node_fields['title'] = $node->title;
    }  
    elseif (isset($node->{$field_name}) && in_array($field_name, $tagged_fields)) {
      $field = field_info_field($field_name);
      $raw = $node->{$field_name};
      
      // We check for emptiness using the Fields API hook_field_is_empty()
      $function = $field['module'] . '_field_is_empty';
      
      if (!isset($raw['und']) || !isset($raw['und'][0])) {
        $value = '';
      }
      elseif (function_exists($function) && !$function($raw['und'][0], $field)) {
        $value = 'cck'; // A dummy value to flag this field has been set
      } 
      else {
        $value = ''; // Field not set
      }
      
      $node_fields[$field_name] = $value;
    }
  }
  
  if (count($node_fields)) {
    $node_fields['nid'] = $node->nid; 
  }
  
  return $node_fields;
}

/**
 * Get all the fields that should be always ignored in completion checks.
 * 
 * @return
 *   Array of ignored fields. 
 */
function content_complete_get_ignore_fields() {
  $ignore = array(
    'menu' 
  );
  return $ignore;
}

/**
 * Get all the fields of this content type that could be checked for completion.
 * 
 * A label tag is added for the human-readable description of the field.
 * 
 * @param $content_type
 *   The machine-readable name of the content type.
 * @return
 *   Array assoc of fields with field data.
 */
function content_complete_get_fields($content_type) {
  $type = node_type_get_type($content_type);
  
  if ($type && $type->has_title) {
    $fields['title'] = array(
      'label' => $type->title_label,
    );
  }
  
  $fields += field_info_instances('node', $content_type);
  
  return $fields;
}

/**
 * Get all fields of this content type that are tagged for completion.
 * 
 * @param $content_type
 *   The machine-readable name of the content type.
 * @return
 *   Array of fields.
 */
function content_complete_get_tagged_fields($content_type) {
  return variable_get('content_complete_fields_' . $content_type, array());
}

/**
 * Wrapper function for tt() if i18nstrings enabled.
 */
function content_complete_tt($name, $string, $langcode = NULL, $update = FALSE) {
  if (module_exists('i18ncontent')) {
    return tt($name, $string, $langcode, $update);
  }
  else {
    return $string;
  }
}

/**
 * Implements hook_theme(). 
 */
function content_complete_theme() {
  $path = drupal_get_path('module', 'content_complete') . '/theme';
  return array(
    'content_complete_profile_percent_complete' => array(
      'variables' => array('complete' => NULL),
      'file' => 'theme.inc',
      'path' => $path,
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function content_complete_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'content_complete') . '/views',
  );
}
